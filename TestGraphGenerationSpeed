# -*- coding: utf-8 -*-
"""
Created on Sun Jul 21 11:58:43 2024

@author: allis
"""
from timeit import default_timer as timer
from datetime import timedelta


import networkx as nx

def generate_connected_nonisomorphic_graphs(n):
    """
    Generates all connected non-isomorphic graphs with up to n vertices.

    Args:
        n: The maximum number of vertices.

    Yields:
        NetworkX Graph objects representing the non-isomorphic graphs.
    """
    graphs = [nx.Graph()]  # Start with a single empty graph (0 vertices)
    #i=1
    for num_vertices in range(1, n + 1):
        new_graphs = []
        for graph in graphs:
            for subset in powerset(graph.nodes()):
                new_graph = graph.copy()
                new_vertex = len(graph.nodes()) + 1
                new_graph.add_node(new_vertex)

                # Connect the new vertex to the chosen subset
                new_graph.add_edges_from([(new_vertex, v) for v in subset])

                if is_new_graph(new_graph, new_graphs) and nx.is_connected(new_graph):
                    new_graphs.append(new_graph)
                    #print(i)
                    #i=i+1
        graphs = new_graphs

    yield from graphs  # Yield each generated graph

# Helper functions
def powerset(iterable):
    """Generates all subsets of an iterable (including empty and full set)."""
    from itertools import chain, combinations
    s = list(iterable)
    return chain.from_iterable(combinations(s, r) for r in range(len(s) + 1))

def is_new_graph(graph, existing_graphs):
    """Checks if a graph is not isomorphic to any in the existing list."""
    return not any(nx.is_isomorphic(graph, g) for g in existing_graphs)

# https://oeis.org/A001349
# Example usage
Test_vals = [1, 1, 1, 2, 6, 21, 112, 853, 11117]
for n in range(9):
  print(" n: ",n)
  start = timer()
  print(sum(1 for _ in generate_connected_nonisomorphic_graphs(n))==Test_vals[n])
  
  print(Test_vals[n])
  end = timer()
  print(end - start)
